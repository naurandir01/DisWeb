import { type ITerminalAddon, type ITerminalInitOnlyOptions, type ITerminalOptions, Terminal } from '@xterm/xterm';
import '@xterm/xterm/css/xterm.css';
import { type ComponentPropsWithoutRef } from 'react';
export interface UseXTermProps {
    addons?: ITerminalAddon[];
    options?: ITerminalOptions & ITerminalInitOnlyOptions;
    listeners?: {
        onBinary?(data: string): void;
        onCursorMove?(): void;
        onData?(data: string): void;
        onKey?: (event: {
            key: string;
            domEvent: KeyboardEvent;
        }) => void;
        onLineFeed?(): void;
        onScroll?(newPosition: number): void;
        onSelectionChange?(): void;
        onRender?(event: {
            start: number;
            end: number;
        }): void;
        onResize?(event: {
            cols: number;
            rows: number;
        }): void;
        onTitleChange?(newTitle: string): void;
        customKeyEventHandler?(event: KeyboardEvent): boolean;
    };
}
export declare function useXTerm({ options, addons, listeners }?: UseXTermProps): {
    ref: import("react").RefObject<HTMLDivElement | null>;
    instance: Terminal | null;
};
export interface XTermProps extends Omit<ComponentPropsWithoutRef<'div'>, 'onResize' | 'onScroll'>, UseXTermProps {
}
export declare function XTerm({ className, options, addons, listeners, ...props }: XTermProps): import("react/jsx-runtime").JSX.Element;
export default XTerm;
